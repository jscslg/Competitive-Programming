{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"": {
		"prefix": "lets",
		"body": [
			"#include <bits/stdc++.h>",
			"typedef long long ll;",
			"#define MOD 1000000007",
			"#define f(i,a,b) for(int i=(a);i<(b);++i)",
			"#define f_(i,a,b) for(int i=(a);i>=(b);--i)",
			"#define vi vector<int>",
			"#define vvi vector<vi>",
			"#define ii pair<int,int>",
			"#define vii vector<ii>",
			"#define hmax priority_queue<int>",
			"#define hmin priority_queue<int,vi,greater<int>>",
			"#define pb push_back",
			"#define F first",
			"#define S second",
			"#define all(v) (v).begin(),(v).end()",
			"#define uniquefy(v) v.resize(unique(v.begin(), v.end()) - v.begin())",
			"#define fast ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)",
			"",
			"using namespace std;", 
			"",
			"void c_p_c()",
			"{",
			"    #ifndef ONLINE_JUDGE",
			"    freopen(\"input.txt\", \"r\", stdin);",
			"    freopen(\"output.txt\", \"w\", stdout);",
			"    #endif",
			"}",
			"",
			"void solve(){",
			"",
			"}",
			"",
			"int main(){",
			"    fast;",
			"    c_p_c();",
			"    ll t;",
			"    cin>>t;",
			"    while(t--){",
			"        solve();",
			"    }",
			"    return 0;",
			"}",
		],
		"description": ""
	}
}